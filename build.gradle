import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

// For some reason, this kept running even after the game closed. Wtf and why???
//version=getNextBuildVersion()
//setVersionInProperties()

version = modVersion
group = modGroup
archivesBaseName = modBaseName

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    version = project.forgeVersion
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn project.modBaseClass

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = true // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    mavenCentral()
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    compile files("libs/BetterQuesting-3.5.300.jar")
    compile files("libs/forestry_1.12.2-5.8.2.394.jar")
    compile files("libs/jei_1.12.2-4.15.0.268.jar")
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version

        // copy everything else, thats not the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude "mcmod.info"
        }
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

artifacts {
    archives deobfJar
}

// For some reason, this kept running even after the game closed. Wtf and why???
/*
def getNextBuildVersion() {
    String major = "1"
    String minor = "0"
    String patch = "0"
    String build = "0"

    def pattern = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)") // (modVersion = )(#).(#).(#).(#)
    println "Current ModVersion: " + modVersion
    Matcher matchChecker = pattern.matcher(modVersion.toString())


    if (!matchChecker.matches()) {
        println "A version could not be found or is not specified. Please ensure the correct 'gradle.properties' file is selected and that the 'modVersion' is in the format '#.#.#.#'"
    } else {
        major = matchChecker.group(1)
        minor = matchChecker.group(2)
        patch = matchChecker.group(3)
        build = matchChecker.group(4)
    }

    def ret = (major + "." + minor + "." + patch + "." + (build.toInteger() + 1))

    println "New ModVersion: " + ret
    return ret;
}

// Find better way to write to properties file (HOW DOES ANTBUILDER WORK???)
def setVersionInProperties() {
    String fileDir = "gradle.properties"
    def file = file(fileDir)
    def pattern = Pattern.compile("(^modVersion\\D*)(.[0-9.]+)")

    println "Save ModVersion: " + version.toString()

    def newLines = []
    file.eachLine { String s ->
        String line = s
        def matcher = pattern.matcher(s)
        if (matcher.matches()) {
            line = line.replace(matcher.group(2), version.toString())
        }
        newLines.add(line)
    }

    new File(fileDir).withWriter { out ->
        newLines.each {
            out.println it
        }
    }

    return 0
}
*/